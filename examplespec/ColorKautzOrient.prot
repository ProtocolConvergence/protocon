
constant N := 6;
constant M := 4;

variable x[N] < M;
variable way[(2*N)] < 2;

process P[i < N]
{
  let idx0_even := (N-1-i)/2;
  let idx1_even := idx0_even + N/2;

  let idx0_odd  := (N-1)/2 * (i + 1);
  let idx1_odd  := (N-1)/2 * (i + 2);

  let idx0_tmp := if (N % 2 == 0) then (idx0_even) else (idx0_odd);
  let idx1_tmp := if (N % 2 == 0) then (idx1_even) else (idx1_odd);

  let idx0 := if (idx0_tmp % N != i) then (idx0_tmp) else (idx1_tmp);
  let idx1 := if (idx1_tmp % N != i) then (idx1_tmp) else (idx0_tmp);

  symmetric (lhs_idx, x_idx) <- {# (2*i, idx0), (2*i+1, idx1) #}
  {
    read: way[lhs_idx];
    read: x[x_idx];
  }
  write: x[i];

  (assume & closed)
    (way[2*i]!=way[2*i+1]);
}

(future & silent)
  (forall i < N :
   (forall q < 2 :
    (i == -(2*i + q+1) % N)
    ||
    (x[i] != x[-(2*i + q+1)])
   )
  )
  ;

