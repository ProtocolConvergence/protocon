
// Randomized coloring on a ring where there is communication delay
// between processes. This models the unfair read/write daemon.

constant N := 3;
puppet variable x_pd[N] < 3;
direct variable x[N] < 3;
puppet variable x_sc[N] < 3;

((future & shadow) % puppet)
  (forall i < N : x[i]!=x[i-1]);

process P[i < N]
{
  read: x_pd[i];
  random write: x[i];
  read: x_sc[i];
}

// Communication delay.
process GetPd[i < N]
{
  read: x[i-1];
  write: x_pd[i];
  puppet action: ( x[i-1]!=x_pd[i] --> x_pd[i]:=x[i-1]; );
}

// Communication delay.
process GetSc[i < N]
{
  read: x[i+1];
  write: x_sc[i];
  puppet action: ( x[i+1]!=x_sc[i] --> x_sc[i]:=x[i+1]; );
}

