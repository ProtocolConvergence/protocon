
// Force the problem of synthesizing a bidirectional ring protocol
// to be equivalent to verifying a unidirectional ring protocol.
// For every {j}, the example protocol has actions of the form:
//   ( x[i-1]==a[j] && x[i]==b[j] --> x[i]:=c[j]; )

constant N := 3;

constant M := 3;
constant NActs := 3;
// Actions are listed top-down!
constant a := (0, 1, 2);
constant b := (2, 1, 0);
constant c := (1, 2, 1);

//constant M := 3;
//constant NActs := 3;
//constant a := (0, 1, 2);
//constant b := (0, 1, 2);
//constant c := (1, 2, 0);

//constant M := 4;
//constant NActs := 8;
//constant a := ( 2 , 2 , 3 , 3 , 0 , 0 , 1 , 1 );
//constant b := ( 2 , 0 , 3 , 1 , 3 , 1 , 2 , 0 );
//constant c := ( 1 , 1 , 2 , 2 , 2 , 2 , 1 , 1 );

variable x[N] < M;
variable x1[N] < M;

process P[i < N]
{
  read: x[i-1];
  read: x1[i];
  write: x1[i-1];
  write: x[i];
  //read: x1[i-2];
  //read: x[i+1];

  (future & silent)
    (forall j < NActs : x[i-1]==a[j] && x1[i]==b[j] ==> x1[i-1]==x[i-1] && x[i]==c[j]);
}

