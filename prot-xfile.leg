
%{
#include "cx/synhax.hh"

extern "C" {
#include "cx/fileb.h"
}
#include "prot-xfile.hh"

#define YYSTYPE FinMeta
#define YY_CTX_LOCAL
#define YY_CTX_MEMBERS \
  ProtoconFile* st;

#define YY_INPUT(yy, buf, result, max_size) \
{ \
  result = xget_char_XFile (&yy->st->xf, buf) ? 1 : 0; \
}
%}

ProtoconFile =
  WS?
  (Protocol WS?)?
  (ConstDecl WS?)*
  (VarDecl WS?)+
  { yy->st->sys->topology.commit_variables(); }
  ((  NamedPredicate
    | GlobalAssume
    | GlobalLegit
    | GlobalLegitBehav
    | ProcDecl
   )
   WS?
  )*
  END_OF_FILE
  ;

Protocol = 'protocol' WS name:ID END_STMT {}
  ;

ConstDecl =
  'constant' WS name:ID WS? ':=' WS? v:ConstExpr END_STMT
  {
    yy->st->add_constant(name.sp, v.sp);
  }
  ;

OptionalShadowPuppetRole =
  {$$.sp = 0;}
  (  'shadow' WS {$$.sp = make_ccstr_Sesp (yy->st->spctx, "shadow");}
   | ('puppet' | 'superposed') WS {$$.sp = make_ccstr_Sesp (yy->st->spctx, "puppet");}
   | ('direct' | 'underlying') WS
  )?
  ;

VarDecl =
  r:OptionalShadowPuppetRole 'variable'
  WS a:ID '[' WS? b:NatDom WS? ']' WS? IN WS? c:NatDom END_STMT
  {
    Xn::Vbl::ShadowPuppetRole role = Xn::Vbl::Direct;
    if (pfxeq_cstr ("shadow", ccstr_of_Sesp (r.sp))) {
      role = Xn::Vbl::Shadow;
    }
    else if (pfxeq_cstr ("puppet", ccstr_of_Sesp (r.sp))) {
      role = Xn::Vbl::Puppet;
    }
    if (r.sp)  lose_Sesp (r.sp);
    yy->st->add_variables(a.sp, b.sp, c.sp, role);
  }
  ;

ActionExpr =
  '(' WS?
   act:Expr WS? '-->' WS?  {act.sp = list2_ccstr_Sesp ("-->", act.sp);}
   (vbl:VblRef WS? ':=' WS?
    (  val:Expr
       {pushlast_Sesp (act.sp, list3_ccstr_Sesp (":=", vbl.sp, val.sp));}
     | val_wild:WILD
       {pushlast_Sesp (act.sp, list3_ccstr_Sesp (":=", vbl.sp, val_wild.sp));}
    )
    END_STMT WS?
    | (wild:WILD WS? END_STMT WS? {pushlast_Sesp (act.sp, wild.sp);})
   )*
   ')'
   {$$ = act;}
   ;

ShadowActionDef =
  ('shadow' | 'underlying') (WS ACTION | ':') WS? act:ActionExpr
  {yy->st->add_action (act.sp, Xn::Vbl::Shadow);}
  (WS? (',' WS?)? act2:ActionExpr {yy->st->add_action (act2.sp, Xn::Vbl::Shadow);} )*
  END_STMT
  ;

DirectActionDef =
  ('direct:' | ('direct' WS)? ACTION) WS? act:ActionExpr
  {yy->st->add_action (act.sp, Xn::Vbl::Direct);}
  (WS? (',' WS?)? act2:ActionExpr {yy->st->add_action (act2.sp, Xn::Vbl::Direct);} )*
  END_STMT
  ;

PuppetActionDef =
  ('puppet' | 'superposed') (WS ACTION | ':') WS? act:ActionExpr
  {yy->st->add_action (act.sp, Xn::Vbl::Puppet);}
  (WS? (',' WS?)? act2:ActionExpr {yy->st->add_action (act2.sp, Xn::Vbl::Puppet);} )*
  END_STMT
  ;

PermitActionDef =
  'permit' (WS ACTION | ':') WS? act:ActionExpr
  {yy->st->permit_action (act.sp);}
  (WS? (',' WS?)? act2:ActionExpr {yy->st->permit_action (act2.sp);} )*
  END_STMT
  ;

ForbidActionDef =
  'forbid' (WS ACTION | ':') WS? act:ActionExpr
  {yy->st->forbid_action (act.sp);}
  (WS? (',' WS?)? act2:ActionExpr {yy->st->forbid_action (act2.sp);} )*
  END_STMT
  ;

ProcNamedPredicate =
  'predicate' WS name:ID WS? ':=' WS? a:Expr END_STMT
  {yy->st->add_pc_predicate(name.sp, a.sp);}
  ;

ProcAssume =
  '(' WS? ASSUME_AND_CLOSED WS? ')' WS?
  '(' WS? a:Expr WS? ')' END_STMT
  {yy->st->add_pc_assume(a.sp);}
  ;

LegitStmt =
    LEGIT ':' WS? legit:Expr END_STMT
    {$$ = legit;}
  | '(' WS?
    (FUTURE_AND_CLOSED | FUTURE_AND_SILENT | FUTURE_AND_SHADOW | FUTURE_AND_SHADOW_MOD_PUPPET)
    WS? ')' WS?
    '(' WS? legit:Expr WS? ')' END_STMT
    {$$ = legit;}
  ;

ProcLegit =
  legit:LegitStmt {yy->st->add_pc_legit(legit.sp);}
  ;

ProcDecl =
  'process' WS pc_name:ID '[' WS? idx_name:ID WS? IN WS? npcs:NatDom WS? ']'
  {yy->st->add_processes(pc_name.sp, idx_name.sp, npcs.sp);}
  WS? '{' WS?
  ( 'let' WS let_name:ID WS? ':=' WS? let_val:Expr END_STMT WS?
    {yy->st->add_let(let_name.sp, let_val.sp);}
  )*
  ( (  'read:'  WS? u:VblRef WS?  {yy->st->add_access(u.sp, 0);}
       (','     WS? v:VblRef WS?  {yy->st->add_access(v.sp, 0);} )*
     | 'write:' WS? u:VblRef WS?  {yy->st->add_access(u.sp, 1);}
       (','     WS? v:VblRef WS?  {yy->st->add_access(v.sp, 1);} )*
    )
    END_STMT WS?
    |
    SymmetricLinks WS?
  )+
  ((  ProcNamedPredicate
    | ProcAssume
    | ProcLegit
    | ShadowActionDef
    | DirectActionDef
    | PuppetActionDef
    | PermitActionDef
    | ForbidActionDef)
   WS?
  )*
  {
    yy->st->finish_pc_def();
  }
  '}'
  ;

ValueList =
  '(' WS? vals:Expr WS?  { vals.sp = list1_Sesp (vals.sp); }
  (',' WS? val:Expr WS?  { pushlast_Sesp (vals.sp, val.sp); })*
  ')'
  { $$ = vals; }
  ;

SymmetricLinks =
  'symmetric' WS
  (  let_names:ID  { let_names.sp = list1_Sesp (let_names.sp); }
     WS? IN WS?
     '{#' WS? let_vals_list:Expr WS?  {let_vals_list.sp = list1_Sesp (list1_Sesp (let_vals_list.sp));}
     (',' WS? let_val:Expr WS?  {pushlast_Sesp (let_vals_list.sp, list1_Sesp (let_val.sp));} )*
   |
     '(' let_names:ID  { let_names.sp = list1_Sesp (let_names.sp); }
     WS?
     (',' WS? let_name:ID  {pushlast_Sesp (let_names.sp, let_name.sp);} WS?)*
     ')' WS? IN WS? '{#' WS?
     let_vals_list:ValueList WS?  {let_vals_list.sp = list1_Sesp (let_vals_list.sp);}
     (',' WS? let_vals:ValueList WS?  {pushlast_Sesp (let_vals_list.sp, let_vals.sp);} )*
  )
  '#}' WS?
  '{' WS?
  { yy->st->add_symmetric_links(let_names.sp, let_vals_list.sp); }
  ( (  'read:'  WS? u:VblRef WS?  {u.sp = list2_ccstr_Sesp ("r", u.sp);}
       (','     WS? v:VblRef WS?  {pushlast_Sesp (u.sp, v.sp);} )*
     | 'write:' WS? u:VblRef WS?  {u.sp = list2_ccstr_Sesp ("w", u.sp);}
       (','     WS? v:VblRef WS?  {pushlast_Sesp (u.sp, v.sp);} )*
    )
    END_STMT WS?
    {
      Sesp vbls_sp = u.sp;
      Bool own = eq_cstr ("w", ccstr_of_Sesp (car_of_Sesp (vbls_sp)));
      vbls_sp = cdr_of_Sesp (vbls_sp);
      yy->st->add_symmetric_access(let_names.sp, let_vals_list.sp, vbls_sp, own);
    }
  )+
 '}'
  ;

NamedPredicate =
  'predicate' WS name:ID WS? ':=' WS? a:Expr END_STMT
  {yy->st->add_predicate(name.sp, a.sp);}
  ;

GlobalAssume =
  '(' WS? ASSUME_AND_CLOSED WS? ')' WS?
  '(' WS? a:Expr WS? ')' END_STMT
  {yy->st->add_assume(a.sp);}
  ;

GlobalLegit =
    (  LEGIT {yy->st->sys->spec->invariant_style = Xn::FutureAndShadow;}
     | ( 'direct'
         {yy->st->sys->spec->invariant_style = Xn::FutureAndShadow;}
       | ('shadow' | 'underlying')
         {yy->st->sys->spec->invariant_style = Xn::FutureAndShadowModPuppet;}
       )
      (WS LEGIT)?
    )
    ':'
    WS? a:Expr END_STMT
    {yy->st->add_legit(a.sp);}
  | '(' WS?
    (  FUTURE_AND_CLOSED {yy->st->sys->spec->invariant_style = Xn::FutureAndClosed;}
     | FUTURE_AND_SILENT {yy->st->sys->spec->invariant_style = Xn::FutureAndSilent;}
     | FUTURE_AND_SHADOW {yy->st->sys->spec->invariant_style = Xn::FutureAndShadow;}
     | FUTURE_AND_SHADOW_MOD_PUPPET {yy->st->sys->spec->invariant_style = Xn::FutureAndShadowModPuppet;}
    )
    WS? ')' WS?
    '(' WS? a:Expr WS? ')' END_STMT
    {yy->st->add_legit(a.sp);}
  ;

GlobalLegitBehav =
  (  FUTURE_SILENT {yy->st->sys->spec->invariant_behav = Xn::FutureSilent;}
   | FUTURE_ACTIVE_SHADOW {yy->st->sys->spec->invariant_behav = Xn::FutureActiveShadow;}
  )
  END_STMT
  ;

ConstExpr = a:ConstSum {$$ = a;}
  ;

ConstSum =
  a:ConstProduct
  (  (WS? '+' WS? b:ConstProduct {a.sp = list3_ccstr_Sesp ("+", a.sp, b.sp);  a.int_ck = 1;} )
   | (WS? '-' WS? b:ConstProduct {a.sp = list3_ccstr_Sesp ("-", a.sp, b.sp);  a.int_ck = 1;} )
  )*
  {$$ = a;}
  ;

ConstProduct =
  a:ConstNeg
  (  (WS? '*' WS? b:ConstNeg {a.sp = list3_ccstr_Sesp ("*", a.sp, b.sp);  a.int_ck = 1;} )
   | (WS? '/' WS? b:ConstNeg {a.sp = list3_ccstr_Sesp ("/", a.sp, b.sp);  a.int_ck = 1;} )
   | (WS? '%' WS? b:ConstNeg {a.sp = list3_ccstr_Sesp ("%", a.sp, b.sp);  a.int_ck = 1;} )
  )*
  {$$ = a;}
  ;

OptionalArithNeg =
  {$$.sp = 0;}
  ( '-' WS? {$$.sp = make_ccstr_Sesp (yy->st->spctx, "negate");} )?
  ;

ConstNeg =
  pfx:OptionalArithNeg a:ConstPower
  {
    $$ = a;
    if (pfx.sp)
      $$.sp = list2_Sesp (pfx.sp, $$.sp);
  }
  ;

ConstPower =
  a:ConstValue
  (  (WS? '^' WS? b:ConstNeg {a.sp = list3_ccstr_Sesp ("^", a.sp, b.sp);  a.int_ck = 1;} )
  )*
  {$$ = a;}
  ;

ConstValue =
    a:NAT {$$ = a;}
  | a:ID {$$ = a; }
  | '(' WS? a:ConstExpr WS? ')'
    {
      $$.sp = list2_ccstr_Sesp ("(int)", a.sp);
      $$.int_ck = a.int_ck;
    }
  ;


Expr =
    a:Quantify {$$ = a;}
  | a:IfThenElse {$$ = a;}
  | a:Implication {$$ = a;}
  ;

IfThenElse =
  'if'   WS a:Expr WS
  'then' WS b:Expr WS
  'else' WS c:Expr
  {
    $$.sp = list4_ccstr_Sesp ("iif", a.sp, b.sp, c.sp);
    Claim2( b.int_ck ,==, 1 );
    Claim2( c.int_ck ,==, 1 );
    $$.int_ck = 1;
  }

Quantify =
    'forall' WS a:ID WS? IN WS? b:NatDom WS? ':' WS? c:Expr
    {
      $$.sp = list4_ccstr_Sesp ("forall", a.sp, b.sp, c.sp);
      $$.int_ck = 0;
    }
  | 'exists' WS a:ID WS? IN WS? b:NatDom WS? ':' WS? c:Expr
    {
      $$.sp = list4_ccstr_Sesp ("exists", a.sp, b.sp, c.sp);
      $$.int_ck = 0;
    }
  | 'unique' WS a:ID WS? IN WS? b:NatDom WS? ':' WS? c:Expr
    {
      $$.sp = list4_ccstr_Sesp ("unique", a.sp, b.sp, c.sp);
      $$.int_ck = 0;
    }
  ;

Implication =
  a:Disjunction
  (WS? '=>' WS? b:Disjunction {a.sp = list3_ccstr_Sesp ("=>", a.sp, b.sp);  a.int_ck = 0;} )*
  {$$ = a;}
  ;

Disjunction =
  a:Conjunction
  (WS? '||' WS? b:Conjunction {a.sp = list3_ccstr_Sesp ("||", a.sp, b.sp);  a.int_ck = 0;} )*
  {$$ = a;}
  ;

Conjunction =
  a:ChainlessFormula
  (WS? '&&' WS? b:ChainlessFormula {a.sp = list3_ccstr_Sesp ("&&", a.sp, b.sp);  a.int_ck = 0;} )*
  {$$ = a;}
  ;

ChainlessFormula =
    a:Quantify {$$ = a;}
  | a:Comparison {$$ = a;}
  ;

Comparison =
  a:Sum
  (  (WS? '==' WS? b:Sum {a.sp = list3_ccstr_Sesp ((b.int_ck ? "==" : "xnor"), a.sp, b.sp);  a.int_ck = 0;} )
   | (WS? '!=' WS? b:Sum {a.sp = list3_ccstr_Sesp ((b.int_ck ? "!=" :  "xor"), a.sp, b.sp);  a.int_ck = 0;} )
   | (WS? '<=' WS? b:Sum {a.sp = list3_ccstr_Sesp ("<=", a.sp, b.sp);  a.int_ck = 0;} )
   | (WS? '>=' WS? b:Sum {a.sp = list3_ccstr_Sesp (">=", a.sp, b.sp);  a.int_ck = 0;} )
   | (WS? '<'  WS? b:Sum {a.sp = list3_ccstr_Sesp ("<", a.sp, b.sp);  a.int_ck = 0;} )
   | (WS? '>'  WS? b:Sum {a.sp = list3_ccstr_Sesp (">", a.sp, b.sp);  a.int_ck = 0;} )
  )?
  {$$ = a;}
  ;

Sum =
  a:Product
  (  (WS? '+' WS? b:Product {a.sp = list3_ccstr_Sesp ("+", a.sp, b.sp);  a.int_ck = 1;} )
   | (WS? '-' WS? b:Product {a.sp = list3_ccstr_Sesp ("-", a.sp, b.sp);  a.int_ck = 1;} )
  )*
  {$$ = a;}
  ;

Product =
  a:Neg
  (  (WS? '*' WS? b:Neg {a.sp = list3_ccstr_Sesp ("*", a.sp, b.sp);  a.int_ck = 1;} )
   | (WS? '/' WS? b:Neg {a.sp = list3_ccstr_Sesp ("/", a.sp, b.sp);  a.int_ck = 1;} )
   | (WS? '%' WS? b:Neg {a.sp = list3_ccstr_Sesp ("%", a.sp, b.sp);  a.int_ck = 1;} )
  )*
  {$$ = a;}
  ;

OptionalNeg =
  {$$.sp = 0;}
  (   '-' WS? {$$.sp = make_ccstr_Sesp (yy->st->spctx, "negate");}
    | '!' WS? {$$.sp = make_ccstr_Sesp (yy->st->spctx, "!");}
  )?
  ;

Neg =
  pfx:OptionalNeg a:Power
  {
    $$ = a;
    if (pfx.sp)
      $$.sp = list2_Sesp (pfx.sp, $$.sp);
  }

Power =
  a:Value
  (  (WS? '^' WS? b:Neg {a.sp = list3_ccstr_Sesp ("^", a.sp, b.sp);  a.int_ck = 1;} )
  )*
  {$$ = a;}
  ;

Value =
    a:VblRef {$$ = a;}
  | a:NAT {$$ = a;}
  | '(' WS? a:Expr WS? ')'
    {
      $$.sp = list2_ccstr_Sesp (a.int_ck ? "(int)" : "(bool)", a.sp);
      $$.int_ck = a.int_ck;
    }
  ;

VblRef =
  a:ID
  ('[' WS? b:Expr WS? ']'
   {a.sp = list3_ccstr_Sesp ("aref", a.sp, b.sp);}
  )?
  {
    $$ = a;
    $$.int_ck = 1;
  }
  ;

NatDom =
  ('Int' | 'Nat') WS? '%' WS? a:ConstValue
  {
    $$.sp = list2_ccstr_Sesp ("NatDom", a.sp);
    $$.int_ck = 1;
  }
  ;

NAT = < [0-9]+ >
  {
    uint u;
    xget_uint_cstr (&u, yytext);
    $$.sp = make_Nat_Sesp (yy->st->spctx, u);
    $$.int_ck = 1;
  }
  ;

IN = '<-'
  ;

LEGIT = 'legit' | 'invariant' ;
FUTURE = 'future' | 'eventually' | '<>' ;
SHADOW = 'shadow' ;
PUPPET = 'puppet' | 'superposed' ;
CLOSED = 'closed' ;
ASSUME = 'assume' ;
SILENT = 'silent' ;
ACTIVE = 'active' ;

FUTURE_AND_SHADOW =
    FUTURE WS? '&' WS? SHADOW
  | SHADOW WS? '&' WS? FUTURE
  ;

FUTURE_AND_SHADOW_MOD_PUPPET =
  '(' WS? FUTURE_AND_SHADOW WS? ')' WS? '%' WS? PUPPET
  ;

ASSUME_AND_CLOSED =
    ASSUME WS? '&' WS? CLOSED
  | CLOSED WS? '&' WS? ASSUME
  ;

FUTURE_AND_CLOSED =
    FUTURE WS? '&' WS? CLOSED
  | CLOSED WS? '&' WS? FUTURE
  ;

FUTURE_AND_SILENT =
    FUTURE WS? '&' WS? SILENT
  | SILENT WS? '&' WS? FUTURE
  ;

FUTURE_AND_ACTIVE =
    FUTURE WS? '&' WS? ACTIVE
  | ACTIVE WS? '&' WS? FUTURE
  ;

CLOSED_AND_ACTIVE =
    CLOSED WS? '&' WS? ACTIVE
  | ACTIVE WS? '&' WS? CLOSED
  ;

FUTURE_AND_CLOSED_AND_ACTIVE =
    FUTURE_AND_CLOSED WS? '&' WS? ACTIVE
  | FUTURE_AND_ACTIVE WS? '&' WS? CLOSED
  | CLOSED_AND_ACTIVE WS? '&' WS? FUTURE
  ;

FUTURE_SILENT =
  FUTURE WS SILENT
  ;

FUTURE_ACTIVE_SHADOW =
  FUTURE WS ACTIVE WS SHADOW
  ;

ACTION = 'act:' | 'action:' ;

END_STMT = WS? ';' ;

WILD = '_'
  {
    $$.sp = list1_Sesp (make_ccstr_Sesp (yy->st->spctx, "wild"));
    $$.int_ck = 1;
  }

ID = < [A-Za-z][0-9A-Za-z_]* >
  {
    $$.sp = make_cstr_Sesp (yy->st->spctx, yytext);
    $$.int_ck = 1;
  }
  ;
LINE_COMMENT = '//' [^\n]* [\n] { yy->st->text_nlines += 1; }
  ;
WHITE_SPACE = ( [ \t\r] | [\n] { yy->st->text_nlines += 1; } )+
  ;
WS = (WHITE_SPACE | LINE_COMMENT)+ {}
  ;
END_OF_FILE = !.
  ;

%%

  bool
ReadProtoconFile(Xn::Sys& sys, const ProtoconFileOpt& opt)
{
  bool good = true;
  yycontext yyctx;
  memset (&yyctx, 0, sizeof (yyctx));
  AlphaTab text = dflt_AlphaTab ();
  text << opt.text;
  XFile xfile[1];
  init_XFile_olay_AlphaTab (xfile, &text);
  yyctx.st = new ProtoconFile(&sys, xfile);
  for (Cx::Map<Cx::String,uint>::const_iterator itr = opt.constant_map.begin();
       itr != opt.constant_map.end();
       ++itr)
  {
    Xn::NatMap x(1);
    x.membs[0] = itr->second;
    x.expression = x.membs[0];
    yyctx.st->sys->spec->constant_map.add(itr->first, x);
  }
  if (!yyparse(&yyctx) || !yyctx.st->allgood) {
    good = false;
    DBog0( "Error parsing file." );
  }
  lose_AlphaTab (&text);
  delete yyctx.st;
  yyrelease(&yyctx);
  sys.commit_initialization();
  return good;
}

