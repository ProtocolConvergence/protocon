
// The actions of P[i] differ slightly from Dijkstra's
// protocol in order to remove nondeterminism.

constant N := 3;

shadow variable fwd[1] < 2;
shadow variable tok[N] < 2;
puppet variable z[N] < 3;

((future & active shadow) % puppet)
  (unique i < N : tok[i]==1);

process Bot[i < 1]
{
  write: fwd[0], tok[i], tok[i+1];

  write: z[i];
  read: z[i+1];

  shadow:
    ( tok[i]==1 --> fwd[0]:=1; tok[i]:=0; tok[i+1]:=1; )
    ;
  puppet:
    ( (z[i]+1)%3==z[i+1] --> z[i]:=z[i+1]+1; fwd[0]:=1; tok[i]:=0; tok[i+1]:=1; )
    ;
}

process P[i <- map tid < N-2 : tid+1]
{
  read: fwd[0];
  write: tok[i-1], tok[i], tok[i+1];

  read: z[i-1];
  write: z[i];
  read: z[i+1];

  shadow:
    ( fwd[0]==1 && tok[i]==1 --> tok[i]:=0; tok[i+1]:=1; )
    ( fwd[0]==0 && tok[i]==1 --> tok[i-1]:=1; tok[i]:=0; )
    ;
  puppet:
    ( (z[i]+1)%3==z[i-1] && (z[i-1]+1)%3!=z[i+1] --> z[i]:=z[i-1]; tok[i-1]:=0; tok[i]:=0; tok[i+1]:=1; )
    ( (z[i]+1)%3==z[i-1] && (z[i-1]+1)%3==z[i+1] --> z[i]:=z[i+1]; tok[i-1]:=1; tok[i]:=0; tok[i+1]:=0; )
    ( (z[i]+1)%3==z[i+1] && (z[i-1]+1)%3==z[i+1] --> z[i]:=z[i+1]; tok[i-1]:=1; tok[i]:=0; tok[i+1]:=0; )

    //// Slower version:
    //( (z[i-1]+1)%3!=z[i+1] -=> z[i]:=z[i-1]; tok[i-1]:=0; tok[i]:=0; tok[i+1]:=1; )
    //( (z[i-1]+1)%3==z[i+1] -=> z[i]:=z[i+1]; tok[i-1]:=1; tok[i]:=0; tok[i+1]:=0; )
    ;
}

process Top[i <- map tid < 1 : N-1]
{
  write: fwd[0], tok[i-1], tok[i];

  read: z[i-1];
  write: z[i];
  read: z[i+1];

  shadow:
    ( tok[i]==1 --> fwd[0]:=0; tok[i-1]:=1; tok[i]:=0; )
    ;
  puppet:
    ( z[i-1]==z[i+1] -=> z[i]:=z[i-1]+1; fwd[0]:=0; tok[i-1]:=1; tok[i]:=0; )
    ;
}

