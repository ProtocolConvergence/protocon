
// The Dining Philosophers Problem.
// See DiningPhiloRand.prot for the simpler version that allows randomization.
// This version breaks symmetry by assuming a coloring.

constant N := 3;

variable hungry[N] < 2;
variable chopstick[(2*N)] < 2;
variable cgt[(2*N)] < 2;

// Converge to a state where no philosopher is hungry or has a chopstick.
(future & future silent)
  (forall i < N : true
   && hungry[i]==0
   && chopstick[2*i  ]==0
   && chopstick[2*i+1]==0
  );

// Assume two philosophers can't have the same chopstick.
(assume & closed)
  (forall i < N :
   chopstick[2*i+1]==0 || chopstick[2*i+2]==0
  );

// Assume a coloring.
// This allows there to be a symmetric solution.
// Values cgt[2*i] and cgt[2*i+1] denote whether P[i]'s color is greater
// than   P[i-1]   and P[i+1]     respectively.
(assume & closed)
  ((forall i < N : cgt[2*i+1]!=cgt[2*i+2])
   &&
   (exists i < N : cgt[2*i] == cgt[2*i+1])
  );


process P[i < N]
{
  let L := 2*i;
  let R := 2*i+1;


  // Whether the philosopher is hungry.
  write: hungry[i];

  read: chopstick[L-1];
  write: chopstick[L];
  write: chopstick[R];
  read: chopstick[R+1];

  // Whether neighbors are hungry.
  // These are not needed in asynchronous systems.
  read: hungry[i-1];
  read: hungry[i+1];

  // Whether this philosopher's color value is greater
  // than the color values of the left and right neighbors.
  // One of these can be omitted in an asynchronous system.
  read: cgt[L];
  read: cgt[R];


  predicate HasChopsticks :=
    (chopstick[L]==1 && chopstick[R]==1);

  predicate hungry_L := hungry[i-1]==1;
  predicate hungry_R := hungry[i+1]==1;


  // Permit actions where hungry status is not changed.
  // (But only those that are not also forbidden.)
  permit:
    ( true --> hungry[i]; )
    ;

  // Can only change to be not hungry when having chopsticks.
  // The chopsticks are not given up during this step.
  permit:
    ( HasChopsticks && hungry[i]==1 --> hungry[i]:=0; _; )
    ;

  // Forbid changing position of both chopsticks at the same time.
  forbid:
    ( true --> chopstick[L]:=1-chopstick[L]; chopstick[R]:=1-chopstick[R]; )
    ;

  puppet:
    ( HasChopsticks -=> hungry[i]:=0; )
    ( hungry[i]==0 -=> chopstick[L]:=0; )
    ( hungry[i]==0 -=> chopstick[R]:=0; )
    ( cgt[L]==0 && hungry_L -=> chopstick[L]:=0; )
    ( cgt[R]==0 && hungry_R -=> chopstick[R]:=0; )

    ( hungry[i]==1 && (cgt[L]==1 || !hungry_L) && (cgt[R]==1 || !hungry_R) && chopstick[L-1]==0
     -=> chopstick[L]:=1;
    )
    ( hungry[i]==1 && (cgt[L]==1 || !hungry_L) && (cgt[R]==1 || !hungry_R) && chopstick[R+1]==0
     -=> chopstick[R]:=1;
    )
    ;
}

