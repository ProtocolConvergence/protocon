
// This token ring converges to a state where one process is enabled at a time.
// It is the same protocol as FoundThreeBitTokenRing,
// but we can define what it means to have a token in a different way.

constant N := 9;

direct variable t[Nat % N] <- Nat % 2;
direct variable e[Nat % N] <- Nat % 2;
direct variable ready[Nat % N] <- Nat % 2;

process Bot[i <- Nat % 1]
{
  read:  e[i-1], t[i-1];
  write: e[i], t[i], ready[i];
  direct action:
    ( e[i-1]==1 && t[i-1]==0 && e[i]==1 && t[i]==0 && ready[i]==0 --> e[i]:=0; t[i]:=0; ready[i]:=0; )
    ( e[i-1]==1 && t[i-1]==0 && e[i]==1 && t[i]==0 && ready[i]==1 --> e[i]:=0; t[i]:=0; ready[i]:=1; )
    ( e[i-1]==0 && t[i-1]==0 && e[i]==0 && t[i]==0 && ready[i]==1 --> e[i]:=1; t[i]:=0; ready[i]:=0; )
    ( e[i-1]==0 && t[i-1]==0 && e[i]==0 && t[i]==0 && ready[i]==0 --> e[i]:=0; t[i]:=1; ready[i]:=1; )
    ( e[i-1]==1 && t[i-1]==1 && e[i]==0 && t[i]==0 && ready[i]==1 --> e[i]:=1; t[i]:=0; ready[i]:=0; )
    ( e[i-1]==1 && t[i-1]==1 && e[i]==0 && t[i]==0 && ready[i]==0 --> e[i]:=1; t[i]:=0; ready[i]:=1; )
    ( e[i-1]==1 && t[i-1]==1 && e[i]==1 && t[i]==1 && ready[i]==1 --> e[i]:=0; t[i]:=1; ready[i]:=1; )
    ( e[i-1]==1 && t[i-1]==1 && e[i]==1 && t[i]==1 && ready[i]==0 --> e[i]:=0; t[i]:=1; ready[i]:=1; )
    ( e[i-1]==1 && t[i-1]==0 && e[i]==0 && t[i]==1 && ready[i]==1 --> e[i]:=1; t[i]:=1; ready[i]:=1; )
    ( e[i-1]==1 && t[i-1]==0 && e[i]==0 && t[i]==1 && ready[i]==0 --> e[i]:=1; t[i]:=1; ready[i]:=0; )
    ( e[i-1]==0 && t[i-1]==0 && e[i]==1 && t[i]==1 && ready[i]==1 --> e[i]:=0; t[i]:=1; ready[i]:=1; )
    ( e[i-1]==0 && t[i-1]==0 && e[i]==1 && t[i]==1 && ready[i]==0 --> e[i]:=0; t[i]:=1; ready[i]:=1; )
    ( e[i-1]==0 && t[i-1]==1 && e[i]==0 && t[i]==1 && ready[i]==1 --> e[i]:=0; t[i]:=0; ready[i]:=1; )
    ( e[i-1]==0 && t[i-1]==1 && e[i]==0 && t[i]==1 && ready[i]==0 --> e[i]:=1; t[i]:=1; ready[i]:=1; )
    ;
}

process P[j <- Nat % (N-1)]
{
  let i := j+1;
  read:  e[i-1], t[i-1];
  write: e[i], t[i], ready[i];
  direct action:
    ( e[i-1]==1 && t[i-1]==1 && e[i]==1 && t[i]==1 && ready[i]==1 --> e[i]:=1; t[i]:=1; ready[i]:=0; )
    ( e[i-1]==1 && t[i-1]==1 && e[i]==0 && t[i]==1 && ready[i]==1 --> e[i]:=1; t[i]:=1; ready[i]:=0; )
    ( e[i-1]==1 && t[i-1]==1 && e[i]==0 && t[i]==1 && ready[i]==0 --> e[i]:=1; t[i]:=1; ready[i]:=0; )
    ( e[i-1]==1 && t[i-1]==1 && e[i]==1 && t[i]==0 && ready[i]==0 --> e[i]:=0; t[i]:=0; ready[i]:=0; )
    ( e[i-1]==0 && t[i-1]==1 && e[i]==1 && t[i]==1 && ready[i]==0 --> e[i]:=0; t[i]:=1; ready[i]:=0; )
    ( e[i-1]==0 && t[i-1]==1 && e[i]==1 && t[i]==1 && ready[i]==1 --> e[i]:=0; t[i]:=1; ready[i]:=0; )
    ( e[i-1]==0 && t[i-1]==1 && e[i]==0 && t[i]==0 && ready[i]==1 --> e[i]:=1; t[i]:=0; ready[i]:=0; )
    ( e[i-1]==1 && t[i-1]==0 && e[i]==0 && t[i]==0 && ready[i]==0 --> e[i]:=1; t[i]:=0; ready[i]:=0; )
    ( e[i-1]==1 && t[i-1]==0 && e[i]==0 && t[i]==0 && ready[i]==1 --> e[i]:=1; t[i]:=0; ready[i]:=1; )
    ( e[i-1]==1 && t[i-1]==1 && e[i]==1 && t[i]==0 && ready[i]==1 --> e[i]:=0; t[i]:=0; ready[i]:=1; )
    ( e[i-1]==0 && t[i-1]==0 && e[i]==1 && t[i]==0 && ready[i]==1 --> e[i]:=0; t[i]:=0; ready[i]:=1; )
    ( e[i-1]==0 && t[i-1]==0 && e[i]==1 && t[i]==0 && ready[i]==0 --> e[i]:=0; t[i]:=0; ready[i]:=0; )
    ( e[i-1]==0 && t[i-1]==1 && e[i]==0 && t[i]==0 && ready[i]==0 --> e[i]:=0; t[i]:=1; ready[i]:=0; )
    ( e[i-1]==0 && t[i-1]==0 && e[i]==0 && t[i]==1 && ready[i]==0 --> e[i]:=0; t[i]:=0; ready[i]:=1; )
    ( e[i-1]==0 && t[i-1]==0 && e[i]==0 && t[i]==1 && ready[i]==1 --> e[i]:=0; t[i]:=0; ready[i]:=0; )
    ( e[i-1]==1 && t[i-1]==0 && e[i]==1 && t[i]==1 && ready[i]==0 --> e[i]:=1; t[i]:=0; ready[i]:=0; )
    ( e[i-1]==1 && t[i-1]==0 && e[i]==1 && t[i]==1 && ready[i]==1 --> e[i]:=1; t[i]:=0; ready[i]:=0; )
    ( e[i-1]==1 && t[i-1]==0 && e[i]==0 && t[i]==1 && ready[i]==1 --> e[i]:=1; t[i]:=0; ready[i]:=0; )
    ( e[i-1]==1 && t[i-1]==0 && e[i]==0 && t[i]==1 && ready[i]==0 --> e[i]:=1; t[i]:=0; ready[i]:=1; )
    ( e[i-1]==0 && t[i-1]==0 && e[i]==1 && t[i]==1 && ready[i]==0 --> e[i]:=1; t[i]:=1; ready[i]:=1; )
    ;
}

// Make the invariant exactly this, no smoothing over puppet variables is allowed.
(future & shadow)
(
  (unique i <- Nat % N :
   i == 0 &&
   // These are the guards of process Bot.
   (   e[i-1]==1 && t[i-1]==0 && e[i]==1 && t[i]==0 && ready[i]==0
    || e[i-1]==1 && t[i-1]==0 && e[i]==1 && t[i]==0 && ready[i]==1
    || e[i-1]==0 && t[i-1]==0 && e[i]==0 && t[i]==0 && ready[i]==1
    || e[i-1]==0 && t[i-1]==0 && e[i]==0 && t[i]==0 && ready[i]==0
    || e[i-1]==1 && t[i-1]==1 && e[i]==0 && t[i]==0 && ready[i]==1
    || e[i-1]==1 && t[i-1]==1 && e[i]==0 && t[i]==0 && ready[i]==0
    || e[i-1]==1 && t[i-1]==1 && e[i]==1 && t[i]==1 && ready[i]==1
    || e[i-1]==1 && t[i-1]==1 && e[i]==1 && t[i]==1 && ready[i]==0
    || e[i-1]==1 && t[i-1]==0 && e[i]==0 && t[i]==1 && ready[i]==1
    || e[i-1]==1 && t[i-1]==0 && e[i]==0 && t[i]==1 && ready[i]==0
    || e[i-1]==0 && t[i-1]==0 && e[i]==1 && t[i]==1 && ready[i]==1
    || e[i-1]==0 && t[i-1]==0 && e[i]==1 && t[i]==1 && ready[i]==0
    || e[i-1]==0 && t[i-1]==1 && e[i]==0 && t[i]==1 && ready[i]==1
    || e[i-1]==0 && t[i-1]==1 && e[i]==0 && t[i]==1 && ready[i]==0
   )
   ||
   i > 0 &&
   // These are the guards of each other process P.
   (   e[i-1]==1 && t[i-1]==1 && e[i]==1 && t[i]==1 && ready[i]==1
    || e[i-1]==1 && t[i-1]==1 && e[i]==0 && t[i]==1 && ready[i]==1
    || e[i-1]==1 && t[i-1]==1 && e[i]==0 && t[i]==1 && ready[i]==0
    || e[i-1]==1 && t[i-1]==1 && e[i]==1 && t[i]==0 && ready[i]==0
    || e[i-1]==0 && t[i-1]==1 && e[i]==1 && t[i]==1 && ready[i]==0
    || e[i-1]==0 && t[i-1]==1 && e[i]==1 && t[i]==1 && ready[i]==1
    || e[i-1]==0 && t[i-1]==1 && e[i]==0 && t[i]==0 && ready[i]==1
    || e[i-1]==1 && t[i-1]==0 && e[i]==0 && t[i]==0 && ready[i]==0
    || e[i-1]==1 && t[i-1]==0 && e[i]==0 && t[i]==0 && ready[i]==1
    || e[i-1]==1 && t[i-1]==1 && e[i]==1 && t[i]==0 && ready[i]==1
    || e[i-1]==0 && t[i-1]==0 && e[i]==1 && t[i]==0 && ready[i]==1
    || e[i-1]==0 && t[i-1]==0 && e[i]==1 && t[i]==0 && ready[i]==0
    || e[i-1]==0 && t[i-1]==1 && e[i]==0 && t[i]==0 && ready[i]==0
    || e[i-1]==0 && t[i-1]==0 && e[i]==0 && t[i]==1 && ready[i]==0
    || e[i-1]==0 && t[i-1]==0 && e[i]==0 && t[i]==1 && ready[i]==1
    || e[i-1]==1 && t[i-1]==0 && e[i]==1 && t[i]==1 && ready[i]==0
    || e[i-1]==1 && t[i-1]==0 && e[i]==1 && t[i]==1 && ready[i]==1
    || e[i-1]==1 && t[i-1]==0 && e[i]==0 && t[i]==1 && ready[i]==1
    || e[i-1]==1 && t[i-1]==0 && e[i]==0 && t[i]==1 && ready[i]==0
    || e[i-1]==0 && t[i-1]==0 && e[i]==1 && t[i]==1 && ready[i]==0
   )
  )
);

