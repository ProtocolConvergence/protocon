
// 3-coloring protocol
// We want no two adjacent colors to be the same.

constant N := 5;

variable c[Int % N] <- Int % 3;

process P[i <- Int % N]
{
  read: c[i-1];
  write: c[i];
  read: c[i+1];

  predicate illegit := (c[i-1]==c[i] || c[i]==c[i+1]);
  puppet action:
    ( illegit && ((c[i-1] + c[i+1]) % 3 != 1) --> c[i] := 1+c[i-1]*c[i+1]; )
    ( illegit && ((c[i-1] + c[i+1]) % 3 == 1) --> c[i] := 2+c[i-1]*c[i+1]; )
    ;

  invariant: (c[i] != c[i-1]) && (c[i] != c[i+1]);
}

