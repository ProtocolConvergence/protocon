// Orientation for daisy chain topology (i.e., either a ring or a chain).
// The b[i] values are all eventually the same.
// This is a simplified version of examplesynt/OrientDaisy.prot,
// which converges in fewer asynchronous steps.

constant N := 3;
constant Chain := 1;
variable b[Nat % N] <- Nat % 2;
variable w[Nat % (2*N)] <- Nat % 2;

// When it is a chain, just zero out the unused {w} variables.
(assume & closed)
  (Chain==1 ==> w[0]==0 && w[2*(N-1)+1]==0);

process End[id <- Nat % (2*Chain)]
{
  let i := if (id==0) then (0) else (N-1);
  let j := if (id==0) then (i+1) else (i-1);
  let ij := if (id==0) then (2*i+1) else (2*i);
  let ji := if (id==0) then (2*i+2) else (2*i-1);

  read: w[ji];
  write: w[ij];
  read: b[j];
  write: b[i];

  (future & silent)
    (w[ij]!=w[ji] && b[i]==1 && b[j]==1);

  puppet action:
    ( true -=> b[i]:=1; w[ij]:=w[ji]-b[j]; )
    ;
}

process P[id <- Nat % (N-2*Chain)]
{
  let i := Chain+id;
  let j := i-1;
  let k := i+1;
  let ji := 2*i-1;
  let ij := 2*i;
  let ik := 2*i+1;
  let ki := 2*i+2;

  symmetric (l, way_idx, adj_way_idx) <- {# (j, ij, ji), (k, ik, ki) #}
  {
    read: w[adj_way_idx];
    write: w[way_idx];
    read: b[l];
  }
  write: b[i];

  predicate OneWay := w[ij]!=w[ik];

  // Assume this process points in exactly one direction.
  (assume & closed)
    (OneWay);

  // Eventually point the same way as both neighbors.
  (future & silent)
    (w[ji]!=w[ij] && w[ik]!=w[ki] && b[j]==b[i] && b[k]==b[i]);

  puppet action:
    ( w[ji]==0 && w[ki]==0               -=> b[i]:=0; )
    ( w[ji]==1 && w[ki]==1 && b[j]==b[k] -=> b[i]:=1-b[j]; )
    ( w[ji]==1 && w[ki]==1 && b[j]!=b[k] -=> b[i]:=1;         w[ij]:=b[k];  w[ik]:=b[j]; )
    ( w[ji]!=w[ki]                       -=> b[i]:=b[j]*b[k]; w[ij]:=w[ki]; w[ik]:=w[ji]; )
    ;
}


