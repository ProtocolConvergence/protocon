
// Token-passing around a unidirectional ring
// using 5 states per process

constant N := 3;

variable x[N] < 5;

// There exists one token in the ring.
(future & shadow)
  (unique i < N :
   i==0
   &&
   (false
    || x[i-1]> 1 && x[i]> 1
    || x[i-1]<=1 && x[i]==0
    || x[i-1]==1 && x[i]==1
   )
   ||
   i!=0
   &&
   (false
    || x[i-1]==0 && x[i]> 1
    || x[i-1]==1 && x[i]!=1
    || x[i-1]>=2 && x[i]<=1
   )
  );

process Bot[i < 1]
{
  read:  x[i-1];
  write: x[i];

  direct action:
    ( x[i-1]==0 && x[i]==0 --> x[i]:=1; )
    ( x[i-1]==1 && x[i]<=1 --> x[i]:=2; )
    ( x[i-1]> 1 && x[i]> 1 --> x[i]:=0; )
    ;
}

process P[i <- map tid < N-1 : tid+1]
{
  read:  x[i-1];
  write: x[i];

  direct action:
    ( x[i-1]==0 && x[i]> 1 --> x[i]:=x[i]/4; )
    ( x[i-1]==1 && x[i]!=1 --> x[i]:=1; )
    ( x[i-1]==2 && x[i]<=1 --> x[i]:=2+x[i]; )
    ( x[i-1]>=3 && x[i]<=1 --> x[i]:=4; )
    ;
}

