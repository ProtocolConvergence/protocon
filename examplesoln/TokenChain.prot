
constant N := 3;

variable x[Nat % N] <- Nat % 3;

// Process with the token has x[i]!=2 && x[i+1]==2.
// The Top process has the token when x[N-1]!=2.
(future & closed)
  (forall i <- Nat % (N-1) : x[i]<=x[i+1]);

// The protocol remains active.
future active shadow;

process Bot[i <- Nat % 1]
{
  write: x[i];
  read:  x[i+1];

  (assume & closed) (x[i]!=2);

  action:
    ( x[i]!=1 && x[i+1]==2 --> x[i]:=1; )
    ( x[i]!=0 && x[i+1]!=2 --> x[i]:=0; )
    ;
}

process P[j <- Nat % (N-2)]
{
  let i := j+1;

  read: x[i-1];
  write: x[i];
  read: x[i+1];

  action:
    ( x[i-1]==1 && x[i]!=1              --> x[i]:=1; )
    ( x[i-1]==0 && x[i]==1 && x[i+1]==1 --> x[i]:=0; )
    ( x[i-1]==0 && x[i]==0 && x[i+1]==2 --> x[i]:=2; )
    ;
}

process Top[j <- Nat % 1]
{
  let i := N-1;

  read: x[i-1];
  write: x[i];

  (assume & closed) (x[i]!=0);

  action:
    ( x[i-1]==1 && x[i]!=1 --> x[i]:=1; )
    ( x[i-1]!=1 && x[i]!=2 --> x[i]:=2; )
    ;
}

