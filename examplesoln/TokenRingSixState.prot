
// Token-passing around a ring
// using 6 states per process.
// Verified up to N=25

constant N := 3;
constant M := 3;

variable x[N] < M;
variable t[N] < 2;

process Bot[i < 1]
{
  read: x[i-1];  write: x[i];
  read: t[i-1];  write: t[i];
  direct action:
    ( x[i-1]!=2 && x[i]!=2 && t[i-1]<= t[i] --> x[i]:=2-t[i-1]; t[i]:=1-t[i-1]; )
    ( x[i-1]==2 && x[i]==2 && t[i-1]<= t[i] --> x[i]:=1+t[i-1]; t[i]:=1-t[i-1]; )
    ;
}
process P[i <- map tid < N-1 : tid+1]
{
  read: x[i-1];  write: x[i];
  read: t[i-1];  write: t[i];
  direct action:
    ( x[i-1]!=2 &&            t[i-1] < t[i] --> x[i]:=t[i-1]; t[i]:=t[i-1]; )
    ( x[i-1]!=2 && x[i]==2 && t[i-1]>= t[i] --> x[i]:=t[i-1];               )
    ( x[i-1]==2 &&            t[i-1] < t[i] --> x[i]:=2;      t[i]:=t[i-1]; )
    ( x[i-1]==2 && x[i]==0 && t[i-1]>= t[i] --> x[i]:=2;                    )
    ( x[i-1]==2 && x[i]==1 && t[i-1]>= t[i] --> x[i]:=2;      t[i]:=t[i-1]; )
    ;
}

// One process is enabled to act.
// The "active shadow" ensures that the protocol is live.
(future & active shadow)
  (unique i < N :
   i==0 &&
   (false
    || x[i-1]!=2 && x[i]!=2 && t[i-1]<= t[i]
    || x[i-1]==2 && x[i]==2 && t[i-1]<= t[i]
   )
   ||
   i!=0 &&
   (false
    || x[i-1]!=2 &&            t[i-1] < t[i]
    || x[i-1]!=2 && x[i]==2 && t[i-1]>= t[i]
    || x[i-1]==2 &&            t[i-1] < t[i]
    || x[i-1]==2 && x[i]==0 && t[i-1]>= t[i]
    || x[i-1]==2 && x[i]==1 && t[i-1]>= t[i]
   )
  );

