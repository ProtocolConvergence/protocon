
// Token passing on a chain defined in
// Title: Self-stabilizing Systems in Spite of Distributed Control
// Author: Edsger W. Dijkstra
// Year: 1974

constant N := 3;

variable up[Nat % N] <- Nat % 2;
variable z[Nat % N] <- Nat % 2;

// One process has a token.
(future & shadow)
  (unique i <- Nat % N : false
   || i==0        && z[i]==z[i+1] && up[i+1]==0
   || (i+1)%N > 1 && z[i-1]!=z[i]
   || (i+1)%N > 1 && z[i-1]==z[i] && up[i]==1 && z[i]==z[i+1] && up[i+1]==0
   || i==N-1      && z[i-1]!=z[i]
  );

process Bot[i <- Nat % 1]
{
  write: up[i], z[i];
  read:  up[i+1], z[i+1];

  (assume & closed) (up[i]==1);

  action:
    ( z[i]==z[i+1] && up[i+1]==0 --> z[i]:=1-z[i+1]; );
}

process P[i <- 1 + Nat % (N-2)]
{
  read: z[i-1];
  write: up[i], z[i];
  read:  up[i+1], z[i+1];
  action:
    ( z[i-1]!=z[i] --> z[i]:=z[i-1]; up[i]:=1; )
    ( z[i-1]==z[i] && up[i]==1 && z[i]==z[i+1] && up[i+1]==0 --> up[i]:=0; )
    ;
}

process Top[i <- (N-1) + Nat % 1]
{
  read: z[i-1];
  write: up[i], z[i];

  (assume & closed) (up[i]==0);

  action:
    ( z[i-1]!=z[i] --> z[i]:=z[i-1]; );
}

