
// Determine a root in a tree.
// The maximum degree of a node is 3.
// See examplesett/LeaderTree.args for example topologies.

// It may not be obvious, but the protocol is:
//   (all but one neighbor pointing towards) --> point at that neighbor
//   (otherwise) --> point at nothing

constant N_uni := 3;
constant N_bin := 1;
constant N_tri := 1;
constant w_uni := (3, 5, 7);
constant w_bin := (0,2);
constant w_tri := (1,4,6);

constant N_conn := (N_uni + 2*N_bin + 3*N_tri) / 2;

variable w[(2*N_conn)] < 2;

process P_uni[i < N_uni]
{
  let ij := w_uni[i];
  let ji := if (ij % 2 == 0) then (ij+1) else (ij-1);

  write: w[ij];
  read: w[ji];

  (future & future silent)
    (w[ij]!=w[ji]);

  puppet action:
    ( true -=> w[ij]:=1-w[ji]; )
    ;
}

process P_bin[i < N_bin]
{
  let ij := w_bin[2*i+0];
  let ik := w_bin[2*i+1];

  let ji := if (ij % 2 == 0) then (ij+1) else (ij-1);
  let ki := if (ik % 2 == 0) then (ik+1) else (ik-1);

  symmetric (w_idx, adj_w_idx) <- {# (ij, ji), (ik, ki) #}
  {
    write: w[w_idx];
    read: w[adj_w_idx];
  }

  (assume & closed)
    (w[ij] + w[ik] <= 1);

  (future & future silent)
    (w[ij]!=w[ji] && w[ik]!=w[ki]);

  puppet action:
    ( w[ji]+w[ki]==1 -=> w[ij]:=1-w[ji]; w[ik]:=1-w[ki]; )
    ( w[ji]+w[ki]!=1 -=> w[ij]:=0; w[ik]:=0; )
    ;
}

process P_tri[i < N_tri]
{
  let ij := w_tri[3*i+0];
  let ik := w_tri[3*i+1];
  let il := w_tri[3*i+2];

  let ji := if (ij % 2 == 0) then (ij+1) else (ij-1);
  let ki := if (ik % 2 == 0) then (ik+1) else (ik-1);
  let li := if (il % 2 == 0) then (il+1) else (il-1);

  symmetric (w_idx, adj_w_idx) <- {# (ij, ji), (ik, ki), (il, li) #}
  {
    write: w[w_idx];
    read: w[adj_w_idx];
  }

  (assume & closed)
    (w[ij] + w[ik] + w[il] <= 1);

  (future & future silent)
    (w[ij]!=w[ji] && w[ik]!=w[ki] && w[il]!=w[li]);

  puppet action:
    ( w[ji]+w[ki]+w[li]==2 -=> w[ij]:=1-w[ji]; w[ik]:=1-w[ki]; w[il]:=1-w[li]; )
    ( w[ji]+w[ki]+w[li]!=2 -=> w[ij]:=0; w[ik]:=0; w[il]:=0; )
    ;
}

