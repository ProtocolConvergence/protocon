
// Token passing on a ring defined in
// Title: A Self-Stabilizing Algorithm with Tight Bounds for Mutual Exclusion on a Ring
// Author: Viacheslav Chernoy
// Author: Mordechai Shalom
// Author: Shmuel Zaks
// Year: 2008

constant N := 3;

variable z[Nat % N] <- Nat % 3;

process Bot[i <- Nat % 1]
{
  write: z[i];
  read:  z[i+1];
  direct action:
    ( (z[i]+1)%3 == z[i+1] --> z[i] := z[i]+2; )
    ;
}

process P[i <- 1 + Nat % (N-2)]
{
  read:  z[i-1];
  write: z[i];
  read:  z[i+1];
  direct action:
    (    ((z[i-1]-1)%3 == z[i+1] && z[i+1] == z[i])
      || ((z[i  ]+1)%3 == z[i-1] && z[i-1] == z[i+1])
      || ((z[i+1]-1)%3 == z[i-1] && z[i-1] == z[i])
     -->
      z[i] := z[i] + 1;
    )
    ;
}


process Top[i <- (N-1) + Nat % 1]
{
  read: z[i-1];
  write: z[i];
  read: z[i+1];
  direct action:
    ( z[i-1] == z[i] && z[i] == z[i+1] || z[i-1] == (z[i]+1)%3 --> z[i] := z[i-1]+1; )
    ;
}

(future & shadow)
(
  (exists a <- Nat % 3 :
   (forall i <- Nat % N :
    z[i] != a))
  &&
  // One process has a token.
  (unique i <- Nat % N :
   (   (i == 0 &&
        ((z[i]+1)%3 == z[i+1]))
    || (i != 0 && i != N-1 &&
        (   ((z[i-1]-1)%3 == z[i+1] && z[i+1] == z[i])
         || ((z[i  ]+1)%3 == z[i-1] && z[i-1] == z[i+1])
         || ((z[i+1]-1)%3 == z[i-1] && z[i-1] == z[i])))
    || (i == N-1 &&
        (z[i-1] == z[i] && z[i] == z[i+1] || z[i-1] == (z[i]+1)%3))
   )
  )
);

