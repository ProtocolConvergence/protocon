
%{
#include "cx/synhax.hh"

extern "C" {
#include "cx/fileb.h"
}
#include "prot-xfile.hh"

#define YYSTYPE FinMeta
#define YY_CTX_LOCAL
#define YY_CTX_MEMBERS \
  ProtoconFile* st;

#define YY_INPUT(yy, buf, result, max_size) \
{ \
  result = xget_char_XFile (&yy->st->xf, buf) ? 1 : 0; \
}

namespace PROJECT_NAMESPACE {
%}

ProtoconFile =
  WS?
  (Protocol WS?)?
  (ConstDecl WS?)*
  (  (VarDecl WS?)+  {yy->st->sys->topology.commit_variables();}
   | < [^;]+ >  {yy->st->bad_parse(yytext, "Bad variable declaration.");} END_STMT?
  )
  ((  NamedPredicate
    | GlobalAssume
    | GlobalLegit
    | GlobalLegitBehav
    | ProcDecl
    | < . .* >  {yy->st->bad_parse(0, "Unknown.");}
   )
   WS?
  )*
  END_OF_FILE
  ;

Protocol = 'protocol' WS name:ID END_STMT {}
  ;

ConstDecl =
  'constant' WS name:ID DEFEQ
  (  v:ConstExpr
     {yy->st->add_constant(name.sp, v.sp);}
   | v:ConstIntList
     {yy->st->add_constant_list(name.sp, v.sp);}
  )
  END_STMT
  ;


ConstIntList =
  '(' WS? a:ConstExpr WS?  {a.sp = list2_ccstr_Sesp ("list", a.sp);}
  (',' WS? b:ConstExpr WS?  {pushlast_Sesp (a.sp, b.sp);})*
  ')'
  {$$ = a;}
  ;

OptionalShadowPuppetRole =
  {$$.aux.i = (int) Xn::Vbl::Direct;}
  (  SHADOW WS {$$.aux.i = (int) Xn::Vbl::Shadow;}
   | PUPPET WS {$$.aux.i = (int) Xn::Vbl::Puppet;}
   | DIRECT WS
   | 'underlying' WS
  )?
  ;

VarDecl =
  role:OptionalShadowPuppetRole 'variable'
  WS a:ID '[' WS? b:NatDom WS? ']' WS? IN WS? c:NatDom END_STMT
  {
    yy->st->add_variables(a.sp, b.sp, c.sp,
                          (Xn::Vbl::ShadowPuppetRole) role.aux.i);
  }
  ;

ActionExpr =
  '(' WS?
   act:Expr WS?
   (  '-->' {act.sp = list2_ccstr_Sesp ("-->", act.sp);}
    | '-=>' {act.sp = list2_ccstr_Sesp ("-=>", act.sp);}
   )
   WS?
   ((  vbl:VblRef DEFEQ
       (  wild:WILD
          {pushlast_Sesp (act.sp, list3_ccstr_Sesp (":=", vbl.sp, wild.sp));}
        | val:Expr
          {pushlast_Sesp (act.sp, list3_ccstr_Sesp (":=", vbl.sp, val.sp));}
       )
     | vbl:VblRef
       {pushlast_Sesp (act.sp, list3_ccstr_Sesp (":=", vbl.sp, vbl.sp));}
     | wild:WILD DEFEQ wild2:WILD
       {pushlast_Sesp (act.sp, list3_ccstr_Sesp (":=", wild.sp, wild2.sp));}
     | wild:WILD
       {pushlast_Sesp (act.sp, wild.sp);}
    )
    END_STMT WS?
   )*
   ')'
   {$$ = act;}
   ;

ShadowActionDef =
  (SHADOW | 'underlying') (WS ACTION | ':') WS? act:ActionExpr
  {yy->st->add_action (act.sp, Xn::Vbl::Shadow);}
  (WS? (',' WS?)? act2:ActionExpr {yy->st->add_action (act2.sp, Xn::Vbl::Shadow);} )*
  END_STMT
  ;

DirectActionDef =
  ((DIRECT WS)? ACTION | DIRECT ':') WS? act:ActionExpr
  {yy->st->add_action (act.sp, Xn::Vbl::Direct);}
  (WS? (',' WS?)? act2:ActionExpr {yy->st->add_action (act2.sp, Xn::Vbl::Direct);} )*
  END_STMT
  ;

PuppetActionDef =
  PUPPET (WS ACTION | ':') WS? act:ActionExpr
  {yy->st->add_action (act.sp, Xn::Vbl::Puppet);}
  (WS? (',' WS?)? act2:ActionExpr {yy->st->add_action (act2.sp, Xn::Vbl::Puppet);} )*
  END_STMT
  ;

PermitActionDef =
  'permit' (WS ACTION | ':')
  (WS? act:ActionExpr {yy->st->permit_action (act.sp);}
   (WS? (',' WS?)? act2:ActionExpr {yy->st->permit_action (act2.sp);} )*
  )?
  END_STMT
  ;

ForbidActionDef =
  'forbid' (WS ACTION | ':')
  (WS? act:ActionExpr {yy->st->forbid_action (act.sp);}
   (WS? (',' WS?)? act2:ActionExpr {yy->st->forbid_action (act2.sp);} )*
  )?
  END_STMT
  ;

ConflictActionDef =
  'conflict:'
  (WS? act:ActionExpr {yy->st->conflict_action (act.sp);}
   (WS? (',' WS?)? act2:ActionExpr {yy->st->conflict_action (act2.sp);} )*
   {yy->st->push_conflict_action();}
  )?
  END_STMT
  ;

ProcNamedPredicate =
  'predicate' WS name:ID DEFEQ a:Expr END_STMT
  {yy->st->add_pc_predicate(name.sp, a.sp);}
  ;

ProcAssume =
  '(' WS? ASSUME_AND_CLOSED WS? ')' WS?
  '(' WS? a:Expr WS? ')' END_STMT
  {yy->st->add_pc_assume(a.sp);}
  ;

ProcLegit =
  legit:LegitStmt
  {yy->st->add_pc_legit(legit.sp);}
  ;

ProcDecl =
  idx_offset:NOP
  'process' WS pc_name:ID '[' WS? idx_name:ID WS? IN WS? (idx_offset:ConstProduct WS? '+' WS?)? npcs:NatDom WS? ']'
  {yy->st->add_processes(pc_name.sp, idx_name.sp, npcs.sp, idx_offset.sp);}
  WS? '{' WS?
  ( 'let' WS let_name:ID DEFEQ let_val:Expr END_STMT WS?
    {yy->st->add_let(let_name.sp, let_val.sp);}
  )*
  (
     (  random_flag:NOP
        (RANDOM WS {random_flag.aux.i=1;})?
        write_flag:NOP
        (  'read:'
         | 'write:' {write_flag.aux.i=1;}
        )
        WS?      u:VblRef WS? {yy->st->add_access(u.sp, write_flag.aux.i, random_flag.aux.i);}
        (',' WS? v:VblRef WS? {yy->st->add_access(v.sp, write_flag.aux.i, random_flag.aux.i);} )*
        END_STMT WS?
      | SymmetricLinks WS?
     )+
   | < [^;]+ >  {yy->st->bad_parse(yytext, "Bad variable declaration.");} END_STMT? WS?
  )
  { yy->st->pc_symm->init_representative(); }
  ((  ProcNamedPredicate
    | ProcAssume
    | ProcLegit
    | ShadowActionDef
    | DirectActionDef
    | PuppetActionDef
    | PermitActionDef
    | ForbidActionDef
    | ConflictActionDef
    | < [^};]+ >  {yy->st->bad_parse(yytext);} END_STMT?
   )
   WS?
  )*
  {
    yy->st->finish_pc_def();
  }
  '}'
  ;

ValueList =
  '(' WS? vals:Expr WS?  { vals.sp = list1_Sesp (vals.sp); }
  (',' WS? val:Expr WS?  { pushlast_Sesp (vals.sp, val.sp); })*
  ')'
  { $$ = vals; }
  ;

SymmetricLinks =
  'symmetric' WS
  (  let_names:ID  { let_names.sp = list1_Sesp (let_names.sp); }
     WS? IN WS?
     '{#' WS? let_vals_list:Expr WS?  {let_vals_list.sp = list1_Sesp (list1_Sesp (let_vals_list.sp));}
     (',' WS? let_val:Expr WS?  {pushlast_Sesp (let_vals_list.sp, list1_Sesp (let_val.sp));} )*
   |
     '(' let_names:ID  { let_names.sp = list1_Sesp (let_names.sp); }
     WS?
     (',' WS? let_name:ID  {pushlast_Sesp (let_names.sp, let_name.sp);} WS?)*
     ')' WS? IN WS? '{#' WS?
     let_vals_list:ValueList WS?  {let_vals_list.sp = list1_Sesp (let_vals_list.sp);}
     (',' WS? let_vals:ValueList WS?  {pushlast_Sesp (let_vals_list.sp, let_vals.sp);} )*
  )
  '#}' WS?
  '{' WS?
  { yy->st->add_symmetric_links(let_names.sp, let_vals_list.sp); }
  ( random_flag:NOP
    write_flag:NOP
    ('random' WS {random_flag.aux.i=1;})?
    (  'read:'
     | 'write:' {write_flag.aux.i=1;}
    )
    WS? u:VblRef WS? {u.sp = list1_Sesp (u.sp);}
    (',' WS? v:VblRef WS? {pushlast_Sesp (u.sp, v.sp);} )*
    END_STMT WS?
    {
      Sesp vbls_sp = u.sp;
      yy->st->add_symmetric_access(let_names.sp, let_vals_list.sp, vbls_sp,
                                   write_flag.aux.i, random_flag.aux.i);
    }
  )+
 '}'
  ;

NamedPredicate =
  'predicate' WS name:ID DEFEQ a:Expr END_STMT
  {yy->st->add_predicate(name.sp, a.sp);}
  ;

GlobalAssume =
  '(' WS? ASSUME_AND_CLOSED WS? ')' WS?
  '(' WS? a:Expr WS? ')' END_STMT
  {yy->st->add_assume(a.sp);}
  ;

LegitMode =
    FUTURE_AND_SILENT {yy->st->assign_legit_mode(Xn::FutureAndSilent);}
  | FUTURE_AND_SHADOW {yy->st->assign_legit_mode(Xn::FutureAndShadow);}
  | FUTURE_AND_CLOSED {yy->st->assign_legit_mode(Xn::FutureAndClosed);}
  | FUTURE_AND_ACTIVE_SHADOW {yy->st->assign_legit_mode(Xn::FutureAndActiveShadow);}
  | FUTURE_AND_SILENT_MOD_PUPPET {yy->st->assign_legit_mode(Xn::FutureAndSilent, Xn::ShadowInvariant);}
  | FUTURE_AND_SHADOW_MOD_PUPPET {yy->st->assign_legit_mode(Xn::FutureAndShadow, Xn::ShadowInvariant);}
  | FUTURE_AND_ACTIVE_SHADOW_MOD_PUPPET {yy->st->assign_legit_mode(Xn::FutureAndActiveShadow, Xn::ShadowInvariant);}
  | FUTURE_AND_FUTURE_SILENT {yy->st->assign_legit_mode(Xn::FutureAndSilent, Xn::FutureInvariant);}
  | FUTURE_AND_FUTURE_SHADOW {yy->st->assign_legit_mode(Xn::FutureAndShadow, Xn::FutureInvariant);}
  | FUTURE_AND_FUTURE_ACTIVE_SHADOW {yy->st->assign_legit_mode(Xn::FutureAndActiveShadow, Xn::FutureInvariant);}
  | FUTURE_AND_SILENT {yy->st->assign_legit_mode(Xn::FutureAndSilent, Xn::FutureInvariant);}
#  | FUTURE_AND_CLOSED_AND_FUTURE_SILENT {yy->st->assign_legit_mode(Xn::FutureAndSilent, Xn::FutureInvariant);}
  ;

LegitStmt =
  '(' WS? LegitMode WS? ')' WS?
  '(' WS? a:Expr WS? ')' END_STMT
  {$$ = a;}
  ;

GlobalLegit =
  legit:LegitStmt
  {yy->st->add_legit(legit.sp);}
  ;

GlobalLegitBehav =
  (  FUTURE_SILENT {yy->st->sys->spec->invariant_behav = Xn::FutureSilent;}
   | FUTURE_ACTIVE_SHADOW {yy->st->sys->spec->invariant_behav = Xn::FutureActiveShadow;}
  )
  END_STMT
  ;

ConstExpr = a:ConstSum {$$ = a;}
  ;

ConstSum =
  a:ConstProduct
  (WS?
   op:NOP
   (  '+' {op.aux.s = "+";}
    | '-' {op.aux.s = "-";}
   )
   WS? b:ConstProduct
   {a.sp = list3_ccstr_Sesp (op.aux.s, a.sp, b.sp);  a.int_ck = 1;}
  )*
  {$$ = a;}
  ;

ConstProduct =
  a:ConstNeg
  (WS?
   op:NOP
   (  '*' {op.aux.s = "*";}
    | '/' {op.aux.s = "/";}
    | '%' {op.aux.s = "%";}
   )
   WS? b:ConstNeg
   {a.sp = list3_ccstr_Sesp (op.aux.s, a.sp, b.sp);  a.int_ck = 1;}
  )*
  {$$ = a;}
  ;

OptionalArithNeg =
  {$$.sp = 0;}
  ( '-' WS? {$$.sp = make_ccstr_Sesp (yy->st->spctx, "negate");} )?
  ;

ConstNeg =
  pfx:OptionalArithNeg a:ConstPower
  {
    $$ = a;
    if (pfx.sp)
      $$.sp = list2_Sesp (pfx.sp, $$.sp);
  }
  ;

ConstPower =
  a:ConstIntFuncall
  (  (WS? '^' WS? b:ConstNeg {a.sp = list3_ccstr_Sesp ("^", a.sp, b.sp);  a.int_ck = 1;} )
  )*
  {$$ = a;}
  ;

ConstIntFuncall =
    op:NOP
    (  'max' {op.aux.s = "max";}
     | 'min' {op.aux.s = "min";}
    )
    WS? '(' WS? a:ConstExpr WS? ',' WS? b:ConstExpr WS? ')'
    {
      $$.sp = list3_ccstr_Sesp (op.aux.s, a.sp, b.sp);
      $$.int_ck = 1;
    }
  | a:ConstValue {$$=a;}
  ;

ConstValue =
    a:NAT {$$ = a;}
  | a:ID {$$ = a; }
  | '(' WS? a:ConstExpr WS? ')'
    {
      $$.sp = list2_ccstr_Sesp ("(int)", a.sp);
      $$.int_ck = a.int_ck;
    }
  ;


Expr =
    a:Quantify {$$ = a;}
  | a:IfThenElse {$$ = a;}
  | a:BiImplication {$$ = a;}
  | < [^)}\];]+ >
    {
      yy->st->bad_parse(yytext, "Malformed expression.");
      $$.int_ck = 0;
      $$.sp = make_ccstr_Sesp (yy->st->spctx, "(error)");
    }
  ;

IfThenElse =
  'if'   WS a:Expr WS
  'then' WS b:Expr WS
  'else' WS c:Expr
  {
    $$.sp = list4_ccstr_Sesp ("iif", a.sp, b.sp, c.sp);
    Claim2( b.int_ck ,==, 1 );
    Claim2( c.int_ck ,==, 1 );
    $$.int_ck = 1;
  }

Quantify =
  quant:NOP
  (  'forall' {quant.aux.s = "forall";}
   | 'exists' {quant.aux.s = "exists";}
   | 'unique' {quant.aux.s = "unique";}
  )
  WS a:ID WS? IN WS? b:NatDom WS? ':' WS? c:Expr
  {
    $$.sp = list4_ccstr_Sesp (quant.aux.s, a.sp, b.sp, c.sp);
    $$.int_ck = 0;
  }
  ;

BiImplication =
  a:Implication
  (WS? '<=>' WS? b:Implication {a.sp = list3_ccstr_Sesp ("<=>", a.sp, b.sp);  a.int_ck = 0;} )*
  {$$ = a;}
  ;

Implication =
  a:Disjunction
  (WS? '==>' WS? b:Disjunction {a.sp = list3_ccstr_Sesp ("==>", a.sp, b.sp);  a.int_ck = 0;} )*
  {$$ = a;}
  ;

Disjunction =
  a:Conjunction
  (WS? '||' WS? b:Conjunction {a.sp = list3_ccstr_Sesp ("||", a.sp, b.sp);  a.int_ck = 0;} )*
  {$$ = a;}
  ;

Conjunction =
  a:ChainlessFormula
  (WS? '&&' WS? b:ChainlessFormula {a.sp = list3_ccstr_Sesp ("&&", a.sp, b.sp);  a.int_ck = 0;} )*
  {$$ = a;}
  ;

ChainlessFormula =
    a:Quantify {$$ = a;}
  | a:Comparison {$$ = a;}
  ;

Comparison =
  a:IntExpr
  (WS?
   op:NOP
   (  '==' {op.aux.s = a.int_ck ? "==" : "<=>";}
    | '!=' {op.aux.s = a.int_ck ? "!=" : "xor";}
    | '<=' {op.aux.s = "<=";}
    | '>=' {op.aux.s = ">=";}
    | '<'  {op.aux.s = "<";}
    | '>'  {op.aux.s = ">";}
   )
   WS? b:IntExpr
   {
     const char* a_cstr = ccstr_of_Sesp (a.sp);
     if (a_cstr && (eq_cstr ("==", op.aux.s) || eq_cstr ("!=", op.aux.s))) {
       bool found;
       if (!b.int_ck) {
         found = true;
       }
       else if (!!yy->st->pc_symm) {
         found = yy->st->pc_symm->predicate_map.key_ck(a_cstr);
       }
       else {
         found = yy->st->sys->predicate_map.key_ck(a_cstr);
       }
       if (found && eq_cstr ("==", op.aux.s)) {
         op.aux.s = "<=>";
       }
       else if (found && eq_cstr ("!=", op.aux.s)) {
         op.aux.s = "xor";
       }
     }
     a.sp = list3_ccstr_Sesp (op.aux.s, a.sp, b.sp);
     a.int_ck = 0;
   }
  )?
  {$$ = a;}
  ;

IntExpr = a:Sum {$$ = a};

Sum =
  a:Product
  (WS?
   op:NOP
   (  '+' {op.aux.s = "+";}
    | '-' {op.aux.s = "-";}
   )
   WS? b:Product
   {a.sp = list3_ccstr_Sesp (op.aux.s, a.sp, b.sp);  a.int_ck = 1;}
  )*
  {$$ = a;}
  ;

Product =
  a:Neg
  (WS?
   op:NOP
   (  '*' {op.aux.s = "*";}
    | '/' {op.aux.s = "/";}
    | '%' {op.aux.s = "%";}
   )
   WS? b:Neg
   {a.sp = list3_ccstr_Sesp (op.aux.s, a.sp, b.sp);  a.int_ck = 1;}
  )*
  {$$ = a;}
  ;

OptionalNeg =
  {$$.sp = 0;}
  ( op:NOP
    (  '-' {op.aux.s = "negate";}
     | '!' {op.aux.s = "!";}
    )
    WS?
    {$$.sp = make_ccstr_Sesp (yy->st->spctx, op.aux.s);}
  )?
  ;

Neg =
  pfx:OptionalNeg a:Power
  {
    $$ = a;
    if (pfx.sp)
      $$.sp = list2_Sesp (pfx.sp, $$.sp);
  }

Power =
  a:IntFuncall
  (  (WS? '^' WS? b:Neg {a.sp = list3_ccstr_Sesp ("^", a.sp, b.sp);  a.int_ck = 1;} )
  )*
  {$$ = a;}
  ;

IntFuncall =
    op:NOP
    (  'max' {op.aux.s = "max";}
     | 'min' {op.aux.s = "min";}
    )
    WS? '(' WS? a:IntExpr WS? ',' WS? b:IntExpr WS? ')'
    {
      $$.sp = list3_ccstr_Sesp (op.aux.s, a.sp, b.sp);
      $$.int_ck = 1;
    }
  | a:Value {$$=a;}
  ;

Value =
    a:VblRef {$$ = a;}
  | a:NAT {$$ = a;}
  | '(' WS? a:Expr WS? ')'
    {
      $$.sp = list2_ccstr_Sesp (a.int_ck ? "(int)" : "(bool)", a.sp);
      $$.int_ck = a.int_ck;
    }
  ;

VblRef =
  a:ID
  ('[' WS? b:Expr WS? ']'
   {a.sp = list3_ccstr_Sesp ("aref", a.sp, b.sp);}
  )?
  {
    $$ = a;
    $$.int_ck = 1;
  }
  ;

NatDom =
  ('Int' | 'Nat') WS? '%' WS? a:ConstValue
  {
    $$.sp = list2_ccstr_Sesp ("NatDom", a.sp);
    $$.int_ck = 1;
  }
  ;

NAT = < [0-9]+ >
  {
    uint u;
    xget_uint_cstr (&u, yytext);
    $$.sp = make_Nat_Sesp (yy->st->spctx, u);
    $$.int_ck = 1;
  }
  ;

IN = '<-'
  ;

ANDPOS = WS? '&' WS?;

FUTURE = 'future' | 'eventually' | '<>' ;
SHADOW = 'shadow' ;
PUPPET = 'puppet' | 'superposed' ;
RANDOM = 'random' ;
DIRECT = 'direct';
CLOSED = 'closed' ;
ASSUME = 'assume' ;
SILENT = 'silent' ;
ACTIVE = 'active' ;
ACTIVE_SHADOW = ACTIVE WS SHADOW ;


ASSUME_AND_CLOSED =
    ASSUME ANDPOS CLOSED
  | CLOSED ANDPOS ASSUME
  ;

FUTURE_AND_SILENT =
    FUTURE ANDPOS SILENT
  | SILENT ANDPOS FUTURE
  ;

FUTURE_AND_SHADOW =
    FUTURE ANDPOS SHADOW
  | SHADOW ANDPOS FUTURE
  ;

FUTURE_AND_ACTIVE_SHADOW =
    FUTURE ANDPOS ACTIVE_SHADOW
  | ACTIVE_SHADOW ANDPOS FUTURE
  ;

MOD_PUPPET =
  '%' WS? PUPPET
  ;

FUTURE_AND_SILENT_MOD_PUPPET =
  '(' WS? FUTURE_AND_SILENT WS? ')' WS? MOD_PUPPET
  ;

FUTURE_AND_SHADOW_MOD_PUPPET =
  '(' WS? FUTURE_AND_SHADOW WS? ')' WS? MOD_PUPPET
  ;

FUTURE_AND_ACTIVE_SHADOW_MOD_PUPPET =
  '(' WS? FUTURE_AND_ACTIVE_SHADOW WS? ')' WS? MOD_PUPPET
  ;

FUTURE_AND_FUTURE_SILENT =
    FUTURE ANDPOS FUTURE_SILENT
  | FUTURE_SILENT ANDPOS FUTURE
  ;

FUTURE_AND_FUTURE_SHADOW =
    FUTURE ANDPOS FUTURE_SHADOW
  | FUTURE_SHADOW ANDPOS FUTURE
  ;

FUTURE_AND_FUTURE_ACTIVE_SHADOW =
    FUTURE ANDPOS FUTURE_ACTIVE_SHADOW
  | FUTURE_ACTIVE_SHADOW ANDPOS FUTURE
  ;

FUTURE_AND_CLOSED =
    FUTURE ANDPOS CLOSED
  | CLOSED ANDPOS FUTURE
  ;

FUTURE_AND_CLOSED_AND_FUTURE_SILENT =
    FUTURE_AND_CLOSED ANDPOS FUTURE_SILENT
  | FUTURE_AND_FUTURE_SILENT ANDPOS CLOSED
  | FUTURE_SILENT ANDPOS FUTURE_AND_CLOSED
  | CLOSED ANDPOS FUTURE_AND_FUTURE_SILENT
  ;

FUTURE_SILENT =
  FUTURE WS SILENT
  ;

# Only used for FUTURE_AND_FUTURE_SHADOW.
FUTURE_SHADOW =
  FUTURE WS SHADOW
  ;

FUTURE_ACTIVE_SHADOW =
  FUTURE WS ACTIVE_SHADOW
  ;

ACTION = 'act:' | 'action:' ;

DEFEQ = WS? ':=' WS?;

END_STMT = WS? ';' ;

WILD = '_'
  {
    $$.sp = list1_Sesp (make_ccstr_Sesp (yy->st->spctx, "wild"));
    $$.int_ck = 1;
  }

ID = < [A-Za-z][0-9A-Za-z_]* >
  {
    $$.sp = make_cstr_Sesp (yy->st->spctx, yytext);
    $$.int_ck = 1;
  }
  ;
LINE_COMMENT = '//' [^\n]* [\n] { yy->st->text_nlines += 1; }
  ;
WHITE_SPACE = ( [ \t\r] | [\n] { yy->st->text_nlines += 1; } )+
  ;
WS = (WHITE_SPACE | LINE_COMMENT)+ {}
  ;
END_OF_FILE = !.
  ;
NOP =
  {
    memset(&$$, 0, sizeof($$));
    $$.sp = &yy->st->spctx->nil.base;
  }
  ;

%%

  bool
ReadProtoconFile(Xn::Sys& sys, const ProtoconFileOpt& opt)
{
  bool good = true;
  yycontext yyctx;
  memset (&yyctx, 0, sizeof (yyctx));
  ::AlphaTab text = dflt_AlphaTab ();
  text << opt.text;
  ::XFile xfile[1];
  init_XFile_olay_AlphaTab (xfile, &text);
  yyctx.st = new ProtoconFile(&sys, xfile);
  for (Map<String,Xn::NatMap>::const_iterator itr = opt.constant_map.begin();
       itr != opt.constant_map.end();
       ++itr)
  {
    Xn::NatMap x( itr->second );
    if (!x.expression) {
      x.expression = x.membs[0];
    }
    yyctx.st->sys->spec->constant_map.add(itr->first, x);
  }
  if (!yyparse(&yyctx) || !yyctx.st->allgood) {
    good = false;
  }
  lose_AlphaTab (&text);
  delete yyctx.st;
  yyrelease(&yyctx);

  if (opt.invariant_style != Xn::NInvariantStyles)
    sys.spec->invariant_style = opt.invariant_style;
  if (opt.invariant_scope != Xn::NInvariantScopes)
    sys.spec->invariant_scope = opt.invariant_scope;
  if (opt.invariant_behav != Xn::NInvariantBehavs)
    sys.spec->invariant_behav = opt.invariant_behav;

  sys.commit_initialization();
  return good;
}

} // PROJECT_NAMESPACE

