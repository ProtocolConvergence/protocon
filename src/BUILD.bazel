load("@fildesh//tool/bazel:fildesh_run.bzl", "fildesh_run")
load("@rules_peg//peg:defs.bzl", "cc_parsing_expression_grammar")

package(
    default_visibility = [
        "//test/src:__pkg__",
    ],
)

exports_files([
    "namespace.hh",
    "inst.cc",
    "inst.hh",
])

cc_parsing_expression_grammar(
    name = "prot_xfile_leg",
    src = "prot-xfile.leg",
    out_cc = "prot-xfile.leg.cc",
)


cc_binary(
    name = "biring",
    srcs = [
        "biring.cc",
    ],
    deps = [
        "//src/cx:cx_lib",
        "//src/inline:inline_cc_lib",
        "@fildesh//:fildesh_cc_lib",
    ],
)


cc_library(
    name = "pfmla_glu_lib",
    srcs = [
        "pfmla-glu.c",
        "pfmla-glu.h",
        "pfmla.h",
    ],
    deps = [
        "@mdd-glu//:mdd_glu_cudd_lib",
        "//src/cx:cx_lib",
    ],
)

cc_library(
    name = "pfmla_lib",
    srcs = [
        "pfmla.c",
        "pfmla.cc",
        "pfmla.h",
        "pfmla.hh",
    ],
    deps = [
        ":pfmla_glu_lib",
    ],
    visibility = [
        "//src/uni:__pkg__",
    ],
)

cc_test(
    name = "pfmla_test",
    srcs = [
        "namespace.hh",
        "pfmla_test.cc",
    ],
    deps = [
        ":pfmla_lib",
    ],
)


cc_library(
    name = "xnsys_lib",
    srcs = [
        "namespace.hh",
        "xfmlae.cc",
        "xfmlae.hh",
        "xnsys.cc",
        "xnsys.hh",
        "xnpc.cc",
        "xnpc.hh",
        "xnspec.cc",
        "xnspec.hh",
    ],
    deps = [
        ":pfmla_lib",
    ],
)


cc_library(
    name = "prot_file_lib",
    srcs = [
        "namespace.hh",
        "pla.cc",
        "pla.hh",
        "prot-ofile.cc",
        "prot-ofile.hh",
        "prot-xfile.cc",
        "prot-xfile.hh",
        "prot-xfile.leg.cc",
    ],
    deps = [
        ":xnsys_lib",
        "//src/inline:inline_cc_lib",
        "@fildesh//:fildesh_cc_lib",
    ],
    visibility = [
        "//src/uni:__pkg__",
    ],
)

cc_binary(
    name = "deadfree",
    srcs = [
        "deadfree.cc",
        "namespace.hh",
    ],
    deps = [":prot_file_lib"],
)

cc_library(
    name = "protocon_lib",
    srcs = [
        "conflictfamily.cc",
        "conflictfamily.hh",
        "graphviz.cc",
        "graphviz.hh",
        "inst.cc",
        "inst.hh",
        "interactive.cc",
        "interactive.hh",
        "namespace.hh",
        "opt.cc",
        "opt.hh",
        "pfmla-bittable.c",
        "pfmla-bittable.h",
        "promela.cc",
        "promela.hh",
        "search.hh",
        "stabilization.cc",
        "stabilization.hh",
        "synthesis.cc",
        "synthesis.hh",
        "udp-ofile.cc",
        "udp-ofile.hh",
        "//src/udp-impl:act.embed.h",
    ],
    deps = [
        ":prot_file_lib",
    ],
    # This lets udp-ofile.cc include the generated "udp-impl/act.embed.h" file.
    # Ideally we'd use copts to avoid adding this include path to everything
    # that depends on protocon_lib.
    includes = [
        ".",
    ],
)

cc_binary(
    name = "protocon",
    srcs = [
        "main.cc",
        "main-all.hh",
        "namespace.hh",
        "search.cc",
        "search.hh",
    ],
    deps = [
        ":protocon_lib",
    ],
    visibility = ["//visibility:public"],
)

fildesh_run(
    name = "test_embed_h",
    input_by_xof = {"x_txt": "testlist.txt"},
    output_by_xof = {"o_h": "test.embed.h"},
    src_content = """
cswitch testname -case-pfx \"fn = Test\" -array AllTests -x $(XOF x_txt) -o $(XOF o_h)
    """,
    tool_by_alias = {"cswitch": "@fildesh//tool:cswitch"},
    testonly = 1,
)

cc_library(
    name = "kautz_lib",
    srcs = [
        "kautz.cc",
        "kautz.hh",
    ],
    deps = [
        "//src/cx:cx_lib",
        "@fildesh//:fildesh_cc_lib",
    ],
    testonly = 1,
)

cc_test(
    name = "test",
    srcs = [
        "search.cc",
        "search.hh",
        "test.cc",
        "test.embed.h",
    ],
    deps = [
        ":protocon_lib",
    ],
    data = [
        "//examplesoln:ColorUniRing.prot",
        "//examplespec:LeaderRingHuang.prot",
        "//examplespec:SumNotTwo.prot",
    ],
)
