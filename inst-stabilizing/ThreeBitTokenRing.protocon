
protocol ThreeBitTokenRing;

constant N := 5;

variable e[Int % N] : Int % 2;
variable t[Int % N] : Int % 2;
variable ready[Int % N] : Int % 2;

process Bot[i : Int % 1]
{
  read:  e[i-1], t[i-1];
  write: e[i], t[i], ready[i];
  act: ( e[i-1] == e[i] && t[i-1] != t[i]
         --> e[i] := 1-e[i-1]; ready[i] := 0;
       );
  act: ( e[i-1] == e[i] && t[i-1] == t[i] && !(t[i] == 1 || ready[i] == 1)
         --> e[i] := 1-e[i-1]; ready[i] := 1;
       );
  act: ( e[i-1] == e[i] && t[i-1] == t[i] &&  (t[i] == 1 || ready[i] == 1)
         --> e[i] := 1-e[i-1]; t[i] := 1-t[i-1]; ready[i] := 0;
       );
}

process P[j : Int % (N-1)]
{
  let i := j+1;
  read:  e[i-1], t[i-1];
  write: e[i], t[i], ready[i];
  act: ( e[i-1] != e[i] && t[i-1] == t[i]
         --> e[i] := e[i-1]; ready[i] := 0;
       );
  act: ( e[i-1] != e[i] && t[i-1] != t[i] && !(t[i] == 1 || ready[i] == 1)
         --> e[i] := e[i-1]; ready[i] := 1;
       );
  act: ( e[i-1] != e[i] && t[i-1] != t[i] &&  (t[i] == 1 || ready[i] == 1)
         --> e[i] := e[i-1]; t[i] := t[i-1]; ready[i] := 0;
       );
}

invariant:
  // Some process is enabled.
  (exists i : Int % N :
      i == 0 && e[i-1] == e[i]
   || i != 0 && e[i-1] != e[i]
  )
  &&
  // One process has the token.
  (unique i : Int % N :
      i == 0 && t[i-1] == t[i]
   || i != 0 && t[i-1] != t[i]
  );

