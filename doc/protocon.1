.TH PROTOCON 1 "October 2013" "Version 2013.10.23"
.LS 1
.SH NAME
protocon \- add convergence to shared memory protocols
.SH SYNOPSIS
.B protocon
.IR RUN_MODE ?
.I OPTIONS
.BI -x\  specification-file.protocon
.RB ( -o
.IR solution-file.protocon )?
.SH DESCRIPTION
.I Protocon
adds convergence to shared memory protocols.
.SH RUN_MODE
.TP
.B -random
Randomized backtracking with restarts.
This is the default.
.TP
.B -rank-shuffle
Run the original swarm synthesis algorithm which ranks actions and permutes the actions within each rank.
No backtracking is involved.
.TP
.B -simple
Serial version of backtracking algorithm.
This version does not use randomization or restarts.
.TP
.B -verify
Verify a given protocol.
.TP
.B -minimize-conflicts
Attempt to minimize the conflicts recorded from a previous run.
.TP
.B -test
Run integration tests.
.SH OPTIONS
.TP
.B -h
Print a summary of available options and exit.
.TP
.BI -def\  key\ val
Override or define a constant
.I key
in the input file to have the value
.IR val .
.TP
.BI -param\  key\ val
A solution protocol must satisfy the input system with the constant
.I key
defined as
.IR val .
This is different from
.B -def
since it forces the search to consider an additional system.
If this parameter changes the size of variables, bad things will happen.
For performance, is assumed that the
.B -param
flags specify systems in order of increasing computational cost.
.TP
.BR -param\ '('\  ... \ ')'
.PD 0
.TP
.PD 1
.BR -param\ '['\  ... \ ']'
This alternative form of
.B -param
allows some extra options to be specified between parentheses.
.IP
.BI -def\  key\ val
Multiple constants can be defined.
.IP
.B -no-conflict
Do not consider this parameterized system when minimizing and recording conflicts.
This flag can also be used outside of a
.B -param
block, but affects completeness of the search.
.IP
.B -no-partial
Do not build a partial solution for this parameterized system.
This system will only be considered when a solution is found which satisfies all other systems, at which point the protocol will be verified to work or fail for this system.
In the case of a failed verification, the search will restart.
This flag also implies
.BR -no-conflict .
.TP
.BR -pick\  ( mcv | lcv | fully-random | conflict | quick )
.IP
.B mcv
Most-constrained variable heuristic.
This is used by default, and it is always used since (most) other picking heuristics build on its functionality.
.IP
.B lcv
Least constraining value heuristic.
Attempt to choose actions which constrain the possibilities the least.
.IP
.B fully-random
Randomly choose a candidate action without the MCV heuristic.
The
.B mcv
method already uses randomization in a backtracking search when the run mode is
.B -random
(this is the default) rather than
.BR -simple .
.IP
.B conflict
Try to choose actions which correspond with existing conflicts.
This is constrained by the MCV heuristic.
.IP
.B quick
For testing, don't use this.
The
.B mcv
picking method is fast.
.TP
.BR -pick-reach
Without breaking the most-constrained variable heuristic, try to pick actions which resolve a deadlock which can reach the invariant using the partial solution.
.TP
.BI -o-log\  log-file
Output log file
.IR log-file.tid ,
where
.I tid
is the thread id.
.TP
.BI -x-conflicts\  conflicts-file
Load conflicts from a previous run.
.TP
.BI -o-conflicts\  conflicts-file
Store the conflicts found by this search.
.TP
.BI -snapshot-conflicts
After every iteration, write the current conflicts to a file
.IR conflicts-file.tid ,
where
.I tid
is the thread id.
.TP
.BI -max-conflict\  N
For recorded conflicts, limit the number of actions involved to
.IR N .
There is no limit by default.
.TP
.BI -ntrials\  N
Limit the number of trials per thread to
.IR N .
.TP
.B -try-all
Keep searching, even if a solution is found.
This is helpful for accumulating conflicts.
.TP
.BI -max-depth\  N
Limit search depth to
.I N
levels before restarting.
This is useful if you are searching for small conflicts.
Consider using the
.B -pick fully-random
option with this.
.TP
.BI -max-height\  N
Limit backtracking to
.I N
levels before restarting.
Default is
.IR 3 .
.TP
.BI -o-model\  model-file.pml
Write a Promela model.
This functionality is incomplete, in that the invariant is not included in the model.
.TP
.BI -x-test-known\  known-solution.protocon
After each iteration, test to make sure a known solution can still be found.
This is useful with the
.B -try-all
flag to test (to some degree) that the search method is complete.
.SH EXAMPLES
The
.B inst-stabilizing/
directory contains known solutions to some protocols:
.BR DijkstraFourState ,
.BR DijkstraTokenRing ,
.BR MatchingRing ,
.BR SumNotTarget ,
.BR FoundThreeBitTokenRing ,
and
.BR ThreeBitTokenRing .

It is instructional to verify these.
For example, this is how you would verify that the token ring of three bits from Gouda and Haddix is self-stabilizing for a ring of size
.IR 5 :
.nf
    protocon -verify -x inst-stabilizing/ThreeBitTokenRing.protocon -def N 5
.fi
Similarly, you can verify the token ring generated by this tool:
.nf
    protocon -verify -x inst-stabilizing/FoundThreeBitTokenRing.protocon -def N 5
.fi

Note that if the executable
.B protocon
is not in your
.BR $PATH ,
then you must specify the full pathname to it, such as
.B ../bin/protocon
in order to run these commands.

In the
.B inst/
directory, there are some nice example problem instances.
For now, the following are recommended (others are in the testing phase):
.BR Agreement ,
.BR ColorKautz ,
.BR ColorRing ,
.BR DijkstraTokenRing ,
.BR Leader ,
.BR Matching ,
.BR Sat ,
.BR SumNotTwo ,
and
.BR ThreeBitTokenRing .

.SH EXAMPLE: Coloring
To find a 3-coloring protocol on a ring of size
.IR 5 ,
run:
.nf
    protocon -simple -x inst/ColorRing.protocon -o found.protocon -def N 5
.fi

The
.B -simple
flag is merely there to force a serial execution.
If there are more cores available, run:
.nf
    protocon -x inst/ColorRing.protocon -o found.protocon -def N 5 -o-log search.log
.fi
We use the
.B -o-log
flag to create log files for each search thread.
If these are not desired, simply do not give the flag.

To use the default search method with only one thread (and see the output), set the
.B $OMP_NUM_THREADS
environment variable to
.IR 1 .
In the
.B bash
shell:
.nf
    export OMP_NUM_THREADS=1
    protocon -x inst/ColorRing.protocon -def N 5
    unset OMP_NUM_THREADS
.fi
This can of course be accomplished on one line:
.nf
    OMP_NUM_THREADS=1 protocon -x inst/ColorRing.protocon -def N 5
.fi
The equivalent
.B csh
or
.B tcsh
shell commands are:
.nf
    setenv OMP_NUM_THREADS 1
    protocon -x inst/ColorRing.protocon -def N 5
    unsetenv
.fi

.SH EXAMPLE: Agreement
One particular instance of agreement on a ring poses some issues.
Using the default heuristics, the following may take a long time!
.nf
    protocon -x inst/Agreement.protocon -def N 5
.fi

But notice that removing randomization solves this problem very quickly without any special flags.
.nf
    protocon -simple -x inst/Agreement.protocon -def N 5
.fi
This even works well when the ring, and each variable domain, is of size
.IR 6 .
.nf
    protocon -simple -x inst/Agreement.protocon -def N 6
.fi

The random method can make better decisions (for this problem, at least) by trying to choose actions which make an execution from some deadlock state to the invariant, rather than just resolving some deadlock.
This is accomplished with the
.B -pick-reach
flag.
We can also make better decisions by using the least-constraining value heuristic on top of the default most-constrained variable heuristic.
This is accomplished with the
.B -pick lcv
flag.
Alone, each of these two flags make the runtime finish in a reasonable amount of time (55 seconds on a 2 GHz machine).
Together, they rival the non-random version.
.nf
    protocon -x inst/Agreement.protocon -pick-reach -def N 5
    protocon -x inst/Agreement.protocon -pick lcv -def N 5
    protocon -x inst/Agreement.protocon -pick-reach -pick lcv -def N 5
.fi

Since
.B -pick-reach
helped, we might try the
.B -rank-shuffle
search which does not use backtracking at all, but takes reachability into account as a fundamental concept.
Use the
.B -no-conflict
flag to speed up the trials.
.nf
    protocon -rank-shuffle -x inst/Agreement.protocon -no-conflict -def N 5
.fi
We can similarly use
.B -no-conflict
with backtracking, which works fairly well in this case.
.nf
    protocon -x inst/Agreement.protocon -no-conflict -def N 5
.fi
Be warned that the
.B -no-conflict
flag makes a search incomplete and usually hurts a backtracking search.

For rings of size
.IR 6 ,
the randomized searches do not compete with the
.B -simple
search.

.SH EXAMPLE: Three Bit Token Ring
Let's try to find a stabilizing token ring using three bits on a ring of size
.IR 5 .
.nf
    protocon -x inst/ThreeBitTokenRing.protocon -o found.protocon -def N 5
.fi

Is the protocol stabilizing on a ring of size
.IR 3 ?
.nf
    protocon -verify -x found.protocon -def N 3
.fi

How about of size
.I 4
or
.IR 6 ?
.nf
    protocon -verify -x found.protocon -def N 4
    protocon -verify -x found.protocon -def N 6
.fi

Probably not.
Let's try again, taking those sizes into account!
.nf
    protocon -x inst/ThreeBitTokenRing.protocon -o found.protocon -def N 5 -param N 3 -param N 4 -param N 6
.fi

But what if we want to search up to size
.IR 7 ,
but it takes too long check a system of that size at each decision level?
Use the
.B -no-partial
flag to just verify the protocol on that system after finding a protocol which is self-stabilizing for all smaller sizes.
.nf
    protocon -x inst/ThreeBitTokenRing.protocon -o found.protocon -def N 5 -param N 3 -param N 4 -param N 6 -param [ -def N 7 -no-partial ]
.fi

.SH BUGS
The MPI version currently does not support the
.BR -verify ,
.BR -minimize-conflicts ,
or
.BR -test .
Further, the MPI version does not currently share conflicts between search processes.

When the search considers multiple systems at once (specified via
.B -param
flags), there may be a very rare case where conflicts accumulate in a way which makes the search incomplete.
I have been unable to reliably reproduce this issue.
It is extremely rare and may not even exist.

